#Порт, на котором будет запущен встроенный томкат
server:
  port: 8090
  ssl:
    enabled: false
    key-store: classpath:keystore.p12
    key-store-password: qwerty
    key-store-type: PKCS12
    key-password: qwerty
    client-auth: need
    trust-store: classpath:truststore.p12
    trust-store-password: qwerty
    trust-store-type: PKCS12

spring:
  #DB properties:
  #PostgreSQL
  application:
    name: gran-docs
  datasource:
    url: jdbc:postgresql://localhost:5433/gran-docs
    username: postgres
    password: postgres
    hikari:
      connectionTimeout: 500
      maximumPoolSize: 50
      idleTimeout: 50
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  main:
    allow-bean-definition-overriding: true

  kafka:
    producer:
      client-id: ${spring.application.name}
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 3
    consumer:
      client-id: ${spring.application.name}
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      enable-auto-commit: false
      auto-offset-reset: earliest
      properties:
        spring:
          json:
            trusted:
              packages: ru.gransoft
kafka:
  topics:
    test-topic: topic1
  reuest:
    topic: document
  reply:
    topic: document
  group.id: document-group

  #определяет, регистрируется ли сервис как клиент на Eureka Server.
eureka:
  client:
    register-with-eureka: false
    #получать или нет информацию о зарегистрированных клиентах.
    fetch-registry: false

springdoc:
  api-docs:
    path: /api-docs

logging:
  level:
    ru:
      gransoft: DEBUG

hibernate:
  show_sql: true
  hbm2ddl:
    auto: update

    #  kafka:
    #    # Адреса всех брокеров кластера
    #    bootstrap-servers: host.docker.internal:29092,host.docker.internal:29093
    #    listener:
    #      # Получение каждой записи должно быть подтверждено
    #      ack-mode: record
    #    producer:
    #      client-id: ${spring.application.name}
    #      key-serializer: org.apache.kafka.common.serialization.StringSerializer
    #      retries: 3
    #    consumer:
    #      group-id: ${spring.application.name}
    #      autoOffsetReset: earliest
    #      # Сериализаторы для всех типов
    #      keyDeserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
    #      valueDeserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
    #    properties:
    #      # Тип, для которого определяем конкретные сериализаторы
    #      spring.json.value.default.type: ru.gransoft.dto.DocumentDto
    #      spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.JsonDeserializer
    #      spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
    #      json.trusted.packages: ru.gransoft